{"ast":null,"code":"var _jsxFileName = \"/Users/antonlyzun/Desktop/GoIT/goit-react-hw-04-feedback/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { Component } from 'react';\n// import FeedBackOptions from './FeedBack/FeedBackOptions';\n// import Section from './Section/Section'\n// import Statistic from './Statistics/Statistic';\n// import Nostat from './Notify/Notify';\n// export class App extends Component {\n//   state = {\n//     Good: 0,\n//     Neutral: 0,\n//     Bad: 0\n//   }\n//   onLeaveFeedback = (e) => {\n//     const count = e.target.name;\n//     this.setState(prevState => ({\n//       [count]: prevState[count] + 1\n//     }))\n//   };\n//   totalCount = () => {\n//     const { Good, Neutral, Bad } = this.state;\n//     return Good + Neutral + Bad;\n//   };\n//   positivePercent = () => {\n//     const { Good, Bad, Neutral } = this.state\n//     let positivePercent = 0\n//     const finalPositivePercentage = Math.floor((Good / (Bad + Neutral + Good)) * 100)\n//     if (finalPositivePercentage > 0) {\n//       positivePercent = finalPositivePercentage\n//     }\n//     return positivePercent;\n//   };\n//   render() {\n//     const { Good, Neutral, Bad } = this.state;\n//     const totalFinds = this.totalCount();\n//     const positivePercent = this.positivePercent();\n//     return (\n// \t\t\t<>\n//         <Section title=\"Please leave feedback\">\n//           <FeedBackOptions options={Object.keys(this.state)} onLeaveFeedback={this.onLeaveFeedback} />\n//           {totalFinds === 0 ? (\n//             <Nostat text=\"No feedback\"/>\n//           ) : <Statistic\n//             text=\"Statistics\"\n//             Good={Good}\n//             Neutral={Neutral}\n//             Bad={Bad}\n//             total={totalFinds}\n//             positivePercent={positivePercent}\n//           />\n//           }\n//           </Section>\n// \t\t\t</>\n// \t\t);\n//   }\n// }\nimport React, { useState } from 'react';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Section from './Section';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = event => {\n    const vote = event.currentTarget.name;\n\n    if (vote === 'good') {\n      return setGood(prev => prev + 1);\n    }\n\n    if (vote === 'neutral') {\n      return setNeutral(prev => prev + 1);\n    }\n\n    if (vote === 'bad') {\n      return setBad(prev => prev + 1);\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return bad + neutral + good;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    let startPositivePercentage = 0;\n    const finalPositivePercentage = Math.round(good / (bad + neutral + good) * 100);\n\n    if (finalPositivePercentage > 0) {\n      startPositivePercentage = finalPositivePercentage;\n    }\n\n    return startPositivePercentage;\n  };\n\n  const isFeedback = good || bad || neutral;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontSize: 20,\n      color: '#010101'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        title: \"Please leave feedback\",\n        children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n          options: Object.keys({\n            good,\n            neutral,\n            bad\n          }),\n          onLeaveFeedback: onLeaveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        title: \"Statistics\",\n        children: isFeedback ? /*#__PURE__*/_jsxDEV(Statistics, {\n          good: good,\n          neutral: neutral,\n          bad: bad,\n          total: countTotalFeedback(),\n          positivePercentage: countPositiveFeedbackPercentage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this) : 'No feedback given'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/antonlyzun/Desktop/GoIT/goit-react-hw-04-feedback/src/components/App.jsx"],"names":["React","useState","Statistics","FeedbackOptions","Section","App","good","setGood","neutral","setNeutral","bad","setBad","onLeaveFeedback","event","vote","currentTarget","name","prev","countTotalFeedback","countPositiveFeedbackPercentage","startPositivePercentage","finalPositivePercentage","Math","round","isFeedback","height","display","justifyContent","alignItems","fontSize","color","Object","keys"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\n// import FeedBackOptions from './FeedBack/FeedBackOptions';\n// import Section from './Section/Section'\n// import Statistic from './Statistics/Statistic';\n// import Nostat from './Notify/Notify';\n\n// export class App extends Component {\n//   state = {\n//     Good: 0,\n//     Neutral: 0,\n//     Bad: 0\n//   }\n\n//   onLeaveFeedback = (e) => {\n//     const count = e.target.name;\n//     this.setState(prevState => ({\n//       [count]: prevState[count] + 1\n//     }))\n//   };\n//   totalCount = () => {\n//     const { Good, Neutral, Bad } = this.state;\n//     return Good + Neutral + Bad;\n//   };\n//   positivePercent = () => {\n//     const { Good, Bad, Neutral } = this.state\n//     let positivePercent = 0\n//     const finalPositivePercentage = Math.floor((Good / (Bad + Neutral + Good)) * 100)\n//     if (finalPositivePercentage > 0) {\n//       positivePercent = finalPositivePercentage\n//     }\n//     return positivePercent;\n//   };\n\n//   render() {\n//     const { Good, Neutral, Bad } = this.state;\n//     const totalFinds = this.totalCount();\n//     const positivePercent = this.positivePercent();\n    \n//     return (\n// \t\t\t<>\n//         <Section title=\"Please leave feedback\">\n//           <FeedBackOptions options={Object.keys(this.state)} onLeaveFeedback={this.onLeaveFeedback} />\n//           {totalFinds === 0 ? (\n//             <Nostat text=\"No feedback\"/>\n//           ) : <Statistic\n//             text=\"Statistics\"\n//             Good={Good}\n//             Neutral={Neutral}\n//             Bad={Bad}\n//             total={totalFinds}\n//             positivePercent={positivePercent}\n//           />\n//           }\n//           </Section>\n// \t\t\t</>\n// \t\t);\n//   }\n// }\nimport React, { useState } from 'react';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Section from './Section';\n\nexport const App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = event => {\n    const vote = event.currentTarget.name;\n\n    if (vote === 'good') {\n      return setGood(prev => prev + 1);\n    }\n\n    if (vote === 'neutral') {\n      return setNeutral(prev => prev + 1);\n    }\n\n    if (vote === 'bad') {\n      return setBad(prev => prev + 1);\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return bad + neutral + good;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    let startPositivePercentage = 0;\n    const finalPositivePercentage = Math.round(\n      (good / (bad + neutral + good)) * 100\n    );\n    if (finalPositivePercentage > 0) {\n      startPositivePercentage = finalPositivePercentage;\n    }\n    return startPositivePercentage;\n  };\n\n  const isFeedback = good || bad || neutral;\n\n  return (\n    <div\n      style={{\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 20,\n        color: '#010101',\n      }}\n    >\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys({ good, neutral, bad })}\n            onLeaveFeedback={onLeaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {isFeedback ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            'No feedback given'\n          )}\n        </Section>\n      </div>\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}