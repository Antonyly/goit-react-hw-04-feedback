{"ast":null,"code":"var _jsxFileName = \"/Users/antonlyzun/Desktop/GoIT/goit-react-hw-04-feedback/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport FeedBackOptions from './FeedBack/FeedBackOptions';\nimport Section from './Section/Section';\nimport Statistic from './Statistics/Statistic';\nimport Nostat from './Notify/Notify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0); // render() {\n  // const { Good, Neutral, Bad } = this.state;\n  // const totalFinds = this.totalCount();\n  // const positivePercent = this.positivePercent();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: [/*#__PURE__*/_jsxDEV(FeedBackOptions, {\n        options: Object.keys(this.state),\n        onLeaveFeedback: this.onLeaveFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this), totalFinds === 0 ? /*#__PURE__*/_jsxDEV(Nostat, {\n        text: \"No feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Statistic, {\n        text: \"Statistics\",\n        Good: Good,\n        Neutral: Neutral,\n        Bad: Bad,\n        total: totalFinds,\n        positivePercent: positivePercent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)\n  }, void 0, false); // }\n}; // export class App extends Component {\n//   state = {\n//     Good: 0,\n//     Neutral: 0,\n//     Bad: 0\n//   }\n//   onLeaveFeedback = (e) => {\n//     const count = e.target.name;\n//     this.setState(prevState => ({\n//       [count]: prevState[count] + 1\n//     }))\n//   };\n//   totalCount = () => {\n//     const { Good, Neutral, Bad } = this.state;\n//     return Good + Neutral + Bad;\n//   };\n//   positivePercent = () => {\n//     const { Good, Bad, Neutral } = this.state\n//     let positivePercent = 0\n//     const finalPositivePercentage = Math.floor((Good / (Bad + Neutral + Good)) * 100)\n//     if (finalPositivePercentage > 0) {\n//       positivePercent = finalPositivePercentage\n//     }\n//     return positivePercent;\n//   };\n//   render() {\n//     const { Good, Neutral, Bad } = this.state;\n//     const totalFinds = this.totalCount();\n//     const positivePercent = this.positivePercent();\n//     return (\n// \t\t\t<>\n//         <Section title=\"Please leave feedback\">\n//           <FeedBackOptions options={Object.keys(this.state)} onLeaveFeedback={this.onLeaveFeedback} />\n//           {totalFinds === 0 ? (\n//             <Nostat text=\"No feedback\"/>\n//           ) : <Statistic\n//             text=\"Statistics\"\n//             Good={Good}\n//             Neutral={Neutral}\n//             Bad={Bad}\n//             total={totalFinds}\n//             positivePercent={positivePercent}\n//           />\n//           }\n//           </Section>\n// \t\t\t</>\n// \t\t);\n//   }\n// }\n// import React, { Component } from 'react';\n// import FeedBackOptions from './FeedBack/FeedBackOptions';\n// import Section from './Section/Section'\n// import Statistic from './Statistics/Statistic';\n// import Nostat from './Notify/Notify';\n// export class App extends Component {\n//   state = {\n//     Good: 0,\n//     Neutral: 0,\n//     Bad: 0\n//   }\n//   onLeaveFeedback = (e) => {\n//     const count = e.target.name;\n//     this.setState(prevState => ({\n//       [count]: prevState[count] + 1\n//     }))\n//   };\n//   totalCount = () => {\n//     const { Good, Neutral, Bad } = this.state;\n//     return Good + Neutral + Bad;\n//   };\n//   positivePercent = () => {\n//     const { Good, Bad, Neutral } = this.state\n//     let positivePercent = 0\n//     const finalPositivePercentage = Math.floor((Good / (Bad + Neutral + Good)) * 100)\n//     if (finalPositivePercentage > 0) {\n//       positivePercent = finalPositivePercentage\n//     }\n//     return positivePercent;\n//   };\n//   render() {\n//     const { Good, Neutral, Bad } = this.state;\n//     const totalFinds = this.totalCount();\n//     const positivePercent = this.positivePercent();\n//     return (\n// \t\t\t<>\n//         <Section title=\"Please leave feedback\">\n//           <FeedBackOptions options={Object.keys(this.state)} onLeaveFeedback={this.onLeaveFeedback} />\n//           {totalFinds === 0 ? (\n//             <Nostat text=\"No feedback\"/>\n//           ) : <Statistic\n//             text=\"Statistics\"\n//             Good={Good}\n//             Neutral={Neutral}\n//             Bad={Bad}\n//             total={totalFinds}\n//             positivePercent={positivePercent}\n//           />\n//           }\n//           </Section>\n// \t\t\t</>\n// \t\t);\n//   }\n// }\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/antonlyzun/Desktop/GoIT/goit-react-hw-04-feedback/src/components/App.jsx"],"names":["useState","FeedBackOptions","Section","Statistic","Nostat","App","good","setGood","neutral","setNeutral","bad","setBad","Object","keys","state","onLeaveFeedback","totalFinds","Good","Neutral","Bad","positivePercent"],"mappings":";;;AAAA,SAASA,QAAT,QAAwB,OAAxB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;;AAEA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,CAAD,CAA9B,CAHuB,CAKrB;AACA;AACA;AACA;;AAEA,sBACD;AAAA,2BACK,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,8BACE,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAEY,MAAM,CAACC,IAAP,CAAY,KAAKC,KAAjB,CAA1B;AAAmD,QAAA,eAAe,EAAE,KAAKC;AAAzE;AAAA;AAAA;AAAA;AAAA,cADF,EAEGC,UAAU,KAAK,CAAf,gBACC,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADD,gBAEG,QAAC,SAAD;AACF,QAAA,IAAI,EAAC,YADH;AAEF,QAAA,IAAI,EAAEC,IAFJ;AAGF,QAAA,OAAO,EAAEC,OAHP;AAIF,QAAA,GAAG,EAAEC,GAJH;AAKF,QAAA,KAAK,EAAEH,UALL;AAMF,QAAA,eAAe,EAAEI;AANf;AAAA;AAAA;AAAA;AAAA,cAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AADL,mBADC,CAVqB,CA4BvB;AAED,CA9BM,C,CAghJaf,G;;KAAAA,G","sourcesContent":["import { useState} from 'react';\nimport FeedBackOptions from './FeedBack/FeedBackOptions';\nimport Section from './Section/Section'\nimport Statistic from './Statistics/Statistic';\nimport Nostat from './Notify/Notify';\n\nexport const App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n    // render() {\n    // const { Good, Neutral, Bad } = this.state;\n    // const totalFinds = this.totalCount();\n    // const positivePercent = this.positivePercent();\n    \n    return (\n\t\t\t<>\n        <Section title=\"Please leave feedback\">\n          <FeedBackOptions options={Object.keys(this.state)} onLeaveFeedback={this.onLeaveFeedback} />\n          {totalFinds === 0 ? (\n            <Nostat text=\"No feedback\"/>\n          ) : <Statistic\n            text=\"Statistics\"\n            Good={Good}\n            Neutral={Neutral}\n            Bad={Bad}\n            total={totalFinds}\n            positivePercent={positivePercent}\n          />\n          }\n          </Section>\n\t\t\t</>\n\t\t);\n  // }\n\n}\n\n// export class App extends Component {\n//   state = {\n//     Good: 0,\n//     Neutral: 0,\n//     Bad: 0\n//   }\n\n//   onLeaveFeedback = (e) => {\n//     const count = e.target.name;\n//     this.setState(prevState => ({\n//       [count]: prevState[count] + 1\n//     }))\n//   };\n//   totalCount = () => {\n//     const { Good, Neutral, Bad } = this.state;\n//     return Good + Neutral + Bad;\n//   };\n//   positivePercent = () => {\n//     const { Good, Bad, Neutral } = this.state\n//     let positivePercent = 0\n//     const finalPositivePercentage = Math.floor((Good / (Bad + Neutral + Good)) * 100)\n//     if (finalPositivePercentage > 0) {\n//       positivePercent = finalPositivePercentage\n//     }\n//     return positivePercent;\n//   };\n\n//   render() {\n//     const { Good, Neutral, Bad } = this.state;\n//     const totalFinds = this.totalCount();\n//     const positivePercent = this.positivePercent();\n    \n//     return (\n// \t\t\t<>\n//         <Section title=\"Please leave feedback\">\n//           <FeedBackOptions options={Object.keys(this.state)} onLeaveFeedback={this.onLeaveFeedback} />\n//           {totalFinds === 0 ? (\n//             <Nostat text=\"No feedback\"/>\n//           ) : <Statistic\n//             text=\"Statistics\"\n//             Good={Good}\n//             Neutral={Neutral}\n//             Bad={Bad}\n//             total={totalFinds}\n//             positivePercent={positivePercent}\n//           />\n//           }\n//           </Section>\n// \t\t\t</>\n// \t\t);\n//   }\n// }\n\n\n\n// import React, { Component } from 'react';\n// import FeedBackOptions from './FeedBack/FeedBackOptions';\n// import Section from './Section/Section'\n// import Statistic from './Statistics/Statistic';\n// import Nostat from './Notify/Notify';\n\n// export class App extends Component {\n//   state = {\n//     Good: 0,\n//     Neutral: 0,\n//     Bad: 0\n//   }\n\n//   onLeaveFeedback = (e) => {\n//     const count = e.target.name;\n//     this.setState(prevState => ({\n//       [count]: prevState[count] + 1\n//     }))\n//   };\n//   totalCount = () => {\n//     const { Good, Neutral, Bad } = this.state;\n//     return Good + Neutral + Bad;\n//   };\n//   positivePercent = () => {\n//     const { Good, Bad, Neutral } = this.state\n//     let positivePercent = 0\n//     const finalPositivePercentage = Math.floor((Good / (Bad + Neutral + Good)) * 100)\n//     if (finalPositivePercentage > 0) {\n//       positivePercent = finalPositivePercentage\n//     }\n//     return positivePercent;\n//   };\n\n//   render() {\n//     const { Good, Neutral, Bad } = this.state;\n//     const totalFinds = this.totalCount();\n//     const positivePercent = this.positivePercent();\n    \n//     return (\n// \t\t\t<>\n//         <Section title=\"Please leave feedback\">\n//           <FeedBackOptions options={Object.keys(this.state)} onLeaveFeedback={this.onLeaveFeedback} />\n//           {totalFinds === 0 ? (\n//             <Nostat text=\"No feedback\"/>\n//           ) : <Statistic\n//             text=\"Statistics\"\n//             Good={Good}\n//             Neutral={Neutral}\n//             Bad={Bad}\n//             total={totalFinds}\n//             positivePercent={positivePercent}\n//           />\n//           }\n//           </Section>\n// \t\t\t</>\n// \t\t);\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}